@page "/crearcuenta"
@inject HttpClient HttpClient
@using System;
@using System.Net.Http
@using System.Net.Http.Json
@inject NavigationManager oMenu
@using UBook.Data
@inject IJSRuntime JSRuntime

<PageTitle>Crear una cuenta nueva</PageTitle>
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomRight" />

<div class="row" style="color: #8F8E8E;font-family: 'Poppins';">
    <div class="col-md-6" style="text-align:center">
        <img src="Imagenes/ubook.png" style="width:400px" />
    </div>
    <div class="col-md-4" style="text-align:center">
        <h3>Crear una cuenta nueva</h3>
        <div class="mb-3" style="text-align:left">
            <label for="nombre" class="form-label">DNI</label>
            <input type="text" class="form-control" id="nombre" aria-describedby="emailHelp" style="background: #ececec;" @bind-value="nuevoCuenta.dni">
        </div>
        <div class="mb-3" style="text-align:left">
            <label for="nombre" class="form-label">Nombre</label>
            <input type="email" class="form-control" id="nombre" aria-describedby="emailHelp" style="background: #ececec;" @bind-value="nuevoCuenta.nombre">
        </div>
        <div class="mb-3" style="text-align:left">
            <label for="nombre" class="form-label">Apellido</label>
            <input type="email" class="form-control" id="nombre" aria-describedby="emailHelp" style="background: #ececec;" @bind-value="nuevoCuenta.apellido">
        </div>
        <div class="mb-3" style="text-align:left">
            <label for="fn" class="form-label">Fecha de nacimiento</label>
            <input type="date" class="form-control" id="fn" style="background: #ececec;" @bind-value="nuevoCuenta.fecha_nacimiento">
        </div>
        <div class="mb-3" style="text-align:left">
            <label for="Email" class="form-label">Lugar de Nacimiento</label>
            <input type="email" class="form-control" id="Email" aria-describedby="emailHelp" style="background: #ececec;" @bind-value="nuevoCuenta.lugar_nacimiento">
        </div>
        <div class="mb-3" style="text-align:left">
            <label for="pregunta" class="form-label">Dirección de Envío</label>
            <input type="text" class="form-control" id="pregunta" style="background: #ececec;" @bind-value="nuevoCuenta.direccion">
        </div>
        <div class="mb-3" style="text-align:left">
            <label for="pregunta" class="form-label">Género</label>
            <select class="form-select" aria-label="Default select example" id="estado" style="background: #ececec;" @bind="@nuevoCuenta.genero">
                <option selected disabled value="10">Seleccionar</option>
                <option value="Masculino">Masculino</option>
                <option value="Femenino">Femenino</option>
                <option value="Otro">Otro</option>
            </select>
        </div>
        <div class="mb-3" style="text-align:left">
            <label for="Email" class="form-label">Correo electrónico</label>
            <input type="email" class="form-control" id="Email" aria-describedby="emailHelp" style="background: #ececec;" @bind-value="nuevoCuenta.correo">
        </div>
        
        @* <div class="mb-3" style="text-align:left">
            <label for="Email" class="form-label">Usuario</label>
            <input type="email" class="form-control" id="Email" aria-describedby="emailHelp" style="background: #ececec;" @bind-value="nuevoCuenta.usuario">
        </div> *@
        <div class="mb-3" style="text-align:left">
            <label for="contrasena1" class="form-label">Clave</label>
            <input type="password" class="form-control" id="contrasena1" style="background: #ececec;" @bind-value="nuevoCuenta.contrasena">
            <p style="color:red">@msm</p>
        </div>
        <div class="mb-3" style="text-align:left">
            <label for="contrasena2" class="form-label"> Repetir Clave</label>
            <input type="password" class="form-control" id="contrasena2" style="background: #ececec;" @bind-value="Contrasena2">
        </div>
        <Button class="btn btn-primary" style="background-image: linear-gradient(90deg, #8C52FF 0%, #5CE1E6 100%); width:70%" @onclick="CrearCuentan">Ingresar</Button>

    </div>
</div>
@* @Newtonsoft.Json.JsonConvert.SerializeObject(nuevoCuenta) *@

@code {

    private Cuenta nuevoCuenta = new Cuenta();
    private string Url = "usuario.php";
    private string Contrasena2 { get; set; }
    private string rol = "";

    protected override async Task OnInitializedAsync()
    {
        var temp = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        if (temp != null)
        {
            rol = "user";
        }
        else
        {
            temp = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "admin");
            if (temp != null)
            {
                rol = "admin";
            }
            else
            {
                temp = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "root");
                if (temp != null)
                {
                    rol = "root";
                }
            }
        }

        if (rol == "")
        {
            nuevoCuenta.fecha_nacimiento = DateOnly.FromDateTime(DateTime.Now);

        }
        else
        {
            oMenu.NavigateTo("/notaccess");
        }
    }

    public string msm { get; set; } = string.Empty;
    private async Task CrearCuentan()
    {
        nuevoCuenta.correo = EspaciosHelper.EliminarTodosLosEspacios(nuevoCuenta.correo);
        nuevoCuenta.direccion = EspaciosHelper.EliminarEspaciosRepetidos(nuevoCuenta.direccion);
        nuevoCuenta.nombre = EspaciosHelper.EliminarEspaciosRepetidos(nuevoCuenta.nombre);

        if (EspaciosHelper.ValidarCadena(nuevoCuenta.correo) && EspaciosHelper.ValidarCadena(nuevoCuenta.direccion) && EspaciosHelper.ValidarCadena(nuevoCuenta.nombre))
        {
            if (!EspaciosHelper.TieneEspacios(nuevoCuenta.contrasena))
            {
                msm = ValidadorContraseña.ValidarContraseña(nuevoCuenta.contrasena);
                if (msm == "La contraseña es válida.")
                {
                    msm = string.Empty;
                    if (nuevoCuenta.contrasena == Contrasena2)
                    {
                        var response = await HttpClient.PostAsJsonAsync<Cuenta>(Url, nuevoCuenta);
                        var oRespuesta = response.Content.ReadFromJsonAsync<Respuesta<Cuenta>>().Result;
                        if (oRespuesta.status == "success")
                        {
                            nuevoCuenta = oRespuesta.data;
                            nuevoCuenta.contrasena = "";
                            var temp = Newtonsoft.Json.JsonConvert.SerializeObject(nuevoCuenta);
                            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", temp);
                            oMenu.NavigateTo("/acceder");
                        }
                        else
                        {
                            ShowMessage(ToastType.Danger, oRespuesta.message);
                        }
                    }
                    else
                    {
                        ShowMessage(ToastType.Danger, "Las contraseñas no coinciden");
                    }
                }
            }
            else
            {
                ShowMessage(ToastType.Danger, "La contraseña no debe tener espacios");
            }
            
        }
        else
        {
            ShowMessage(ToastType.Danger, "Asegure haber ingresado toda la información.");
        }
        
    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string obser) => messages.Add(CreateToastMessage(toastType, obser));

    private ToastMessage CreateToastMessage(ToastType toastType, string obser)
    => new ToastMessage
        {
            Type = toastType,
            Title = "UBook Notificación",
            HelpText = $"{DateTime.Now}",
            Message = obser,
        };
}
