@page "/historialcompras"
@using System;
@using System.Net.Http
@using System.Net.Http.Json
@using UBook.Data
@using System.Globalization;
@using Newtonsoft.Json;
@inject NavigationManager oMenu
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components.QuickGrid

@if (carga)
{
    <div class="d-flex justify-content-center" style="margin-top:200px">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <PageTitle>Reservas</PageTitle>
    <Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomRight" />
    <h3 style="text-align:center">Historial de Compras</h3>

    <div class="row mb-3">
        <div class="col-sm">
            <div class="search-box">
                <input type="search" autofocus @bind="vcNombre" @bind:event="oninput" placeholder="Buscar..." />
            </div>
        </div>
        @if (rol == "admin")
        {
            <div class="col-sm-2">
                <a class="btn btn-sm btn-outline-success btn-sm" href="/reglibro"><i class="bi bi-plus-circle"></i>Nuevo</a>
            </div>
        }
    </div>
    <div class="row">

        @foreach (var lib in filtroLibros)
        {
            <div class="col-lg-6">
                <div class="row" style="background-color: #EAEAEA; margin: 5px; max-width: 680px; border: 20px; padding: 10px; align-items: center; align-content: center; text-align: center;}">
                    <!-- Columna 1 con imagen -->
                    <div class="col">
                        <img src="@($"data:image/jpeg;base64,{lib.imagen}")" alt="Producto" class="img-fluid" style="width:125px" />
                    </div>

                    <!-- Columna 2 con dos filas (título y precio) -->
                    <div class="col">
                        <div class="row">
                            <div class="col">
                                <h3>@lib.nombre_libro</h3>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                @if (lib.nuevo == 1)
                                {
                                    <p>*Nuevo*</p>
                                }
                                else
                                {
                                    <p>*Usado*</p>
                                }
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>
                                    @lib.precio.ToString("C0",CultureInfo.CreateSpecificCulture("en-US"))
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="row">
                            @if(lib.estado_envio == "cancelado")
                            {
                                <i class="bi bi-x-octagon-fill" style="font-size:40px;"></i>
                            }
                            else if (lib.estado_envio == "enviado")
                            {
                                <i class="bi bi-bus-front" style="font-size:40px;"></i>
                            }
                            else if (lib.estado_envio == "preparacion")
                            {
                                <i class="bi bi-box-seam-fill" style="font-size:40px;"></i>
                            }
                            <h5>@lib.estado_envio</h5>
                        </div>
                    </div>
                    <!-- Columna 3 con dos filas (botón comprar y botón reservar) -->
                    <div class="col">
                        <div class="row btn" @onclick="@((args) => Cancelar(lib.id_historico))">
                            <i class="bi bi-bag-dash-fill" style="font-size:40px; color:orange"></i>
                            <h5>Cancelar</h5>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
@code {
    public IQueryable<ComprarR> maestroCompra { get; set; } = null;
    private string Url = "miscompras.php";
    private bool carga { get; set; } = true;
    PaginationState paginacion = new PaginationState { ItemsPerPage = 10 };
    QuickGrid<ComprarR> refGrid;
    string vcNombre = string.Empty;
    DateOnly min = new DateOnly(2000, 1, 1);
    DateOnly minMedals = new DateOnly(2000, 1, 1);
    DateOnly maxMedals = DateOnly.FromDateTime(DateTime.Now);
    string rol = string.Empty;
    public Cuenta usuario = new Cuenta();

    protected override async Task OnInitializedAsync()
    {
        var temp = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        if (temp != null)
        {
            usuario = Newtonsoft.Json.JsonConvert.DeserializeObject<Cuenta>(temp);
            var oRespuesta = await HttpClient.GetFromJsonAsync<Respuesta<List<ComprarR>>>(Url + "?id_usuario=" + usuario.ID);
            if (oRespuesta.data != null)
            {
                maestroCompra = oRespuesta.data.AsQueryable();

            }
            else
            {
                maestroCompra = new List<ComprarR>().AsQueryable();
            }
            carga = false;
        }
        else
        {
            oMenu.NavigateTo("/notaccess");
        }
    }

    IQueryable<ComprarR> filtroLibros
    {
        get
        {
            var result = maestroCompra?.Where(c => c.fecha_compra <= maxMedals);

            if (!string.IsNullOrEmpty(vcNombre))
            {
                result = result.Where(c =>
                    (c.estado_envio != null && c.estado_envio.ToLower().Contains(vcNombre.ToLower()))
                    ||
                    (c.nombre_libro != null && c.nombre_libro.ToLower().Contains(vcNombre.ToLower()))
                    ||
                    (c.direccion != null && c.direccion.ToLower().Contains(vcNombre.ToLower()))
                    );
            }


            if (minMedals > min)
            {
                result = result.Where(c => c.fecha_compra >= minMedals);
            }

            return result;
        }
    }

    public class model
    {
        public int id_historico { get; set; }
    }

    private async Task Cancelar(int id)
    {
        var cuerpo = new model();
        cuerpo.id_historico = id;
        var response = await HttpClient.PostAsJsonAsync<model>("cancelarcompra.php", cuerpo);
        var oRespuesta = response.Content.ReadFromJsonAsync<Respuesta<ComprarR>>().Result;
        if (oRespuesta.status == "success")
        {
            ShowMessage(ToastType.Success, "Compra cancelada con éxito");
        }
        else
        {
            ShowMessage(ToastType.Danger, oRespuesta.message);
        }

    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string obser) => messages.Add(CreateToastMessage(toastType, obser));

    private ToastMessage CreateToastMessage(ToastType toastType, string obser)
    => new ToastMessage
        {
            Type = toastType,
            Title = "UBook Notificación",
            HelpText = $"{DateTime.Now}",
            Message = obser,
        };
}
