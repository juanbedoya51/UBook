@page "/comprar"
@inject HttpClient HttpClient
@using System.Net.Http.Json
@using UBook.Data
@using System.Globalization;
@using Newtonsoft.Json;
@inject NavigationManager oMenu
@inject IJSRuntime JSRuntime
@using System;


<PageTitle>Compra</PageTitle>
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomRight" />

<div class="row" style="color: #8F8E8E;font-family: 'Poppins';">
    <div class="col-md-6" style="text-align:center">
        <img src="@($"data:image/jpeg;base64,{nuevoLibro.imagen}")" alt="Producto" class="img-fluid" style="width:125px" />
    </div>
    <div class="col-md-4" style="text-align:center">
        <h3>Info. Libro a Comprar</h3>

        <div class="row">
            <div class="col-md-6">
                <p><strong>Nombre:</strong> @nuevoLibro.nombre</p>
                <p><strong>Autor:</strong> @nuevoLibro.autor</p>
                <p><strong>Editorial:</strong> @nuevoLibro.editorial</p>
                <p><strong>Género:</strong> @nuevoLibro.genero</p>
                <p><strong>Idioma:</strong> @nuevoLibro.idioma</p>
            </div>
            <div class="col-md-6">
                <p><strong>Número de Páginas:</strong> @nuevoLibro.nopagina</p>
                <p><strong>ISSN:</strong> @nuevoLibro.issn</p>
                <p><strong>Fecha de Publicación:</strong> @nuevoLibro.fecha.ToString("dd/MM/yyyy")</p>
                <p><strong>Precio:</strong> @nuevoLibro.precio.ToString("C0",CultureInfo.CreateSpecificCulture("en-US"))</p>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="row">
                <!-- Seleccionar dirección de envío -->
                <h4 class="col-8">Seleccionar Dirección de Envío</h4>
                <!-- Opción para recoger en tienda -->
                <div class="form-check col-4">
                    <input class="form-check-input" type="checkbox" @bind="recogerEnTienda" />
                    <label class="form-check-label"><i class="bi bi-shop"></i>Recoger en tienda</label>
                </div>
            </div>
            <select class="form-select mb-3">
                <option value="">Seleccionar dirección</option>
                @foreach (var direccion in direcciones)
                {
                    <option value="@direccion">@direccion.Nombre - @direccion.Direccion</option>
                }
            </select>
        </div>

        <div class="col-md-6">
            <!-- Seleccionar tarjeta de pago -->
            <h4>Seleccionar Tarjeta de Pago</h4>
            <select class="form-select mb-3">
                <option value="">Seleccionar tarjeta</option>
                @foreach (var tarjeta in tarjetas)
                {
                    <option value="@tarjeta">@tarjeta.Numero - @tarjeta.Titular</option>
                }
            </select>
        </div>
    </div>
    <div class="row" style="text-align: center">
        <div class="col" style="text-align: center">
            <div class="row btn btn-outline-danger" @onclick="ComprarLibro">
                <i class="bi bi-x-circle-fill" style="font-size:30px;"></i>
                <h5>Cancelar</h5>
            </div>
        </div>
        <div class="col" style="text-align: center">
            <div class="row btn btn-outline-primary" @onclick="ComprarLibro">
                <i class="bi bi-check-circle-fill" style="font-size:30px;"></i>
                <h5>Continuar</h5>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public int Id { get; set; }

    private Libro nuevoLibro = new Libro();
    private string mensaje = "";
    private string Url = "libros.php";
    private bool carga { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var temp = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        if (temp != null)
        {

        }
        else
        {
            oMenu.NavigateTo("/notaccess");
        }
    }

    private async Task ReservarLibro()
    {
        // Lógica para reservar el libro
        // Puedes implementar esta lógica según tus requisitos
        ShowMessage(ToastType.Info, "Libro reservado con éxito");
    }

    private async Task ComprarLibro()
    {
        // Lógica para comprar el libro
        // Puedes implementar esta lógica según tus requisitos
        ShowMessage(ToastType.Success, "Libro comprado con éxito");
    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string obser) => messages.Add(CreateToastMessage(toastType, obser));

    private ToastMessage CreateToastMessage(ToastType toastType, string obser)
    => new ToastMessage
        {
            Type = toastType,
            Title = "UBook Notificación",
            HelpText = $"{DateTime.Now}",
            Message = obser,
        };


    // Lista de direcciones y tarjetas (simula la obtención de datos del cliente)
    private List<dir> direcciones = new List<dir>();
    private List<tar> tarjetas = new List<tar>();

    public class dir
    {
        public string Nombre;
        public string Direccion;

    }
    public class tar
    {
        public string Numero;
        public string Titular;
    }

    // Propiedades para la selección del cliente
    private bool recogerEnTienda = false;
}
