@* @page "/tienda"
@inject HttpClient HttpClient
@using System.Net.Http.Json
@using UBook.Data
@using System.Globalization;
@using Newtonsoft.Json;
@inject NavigationManager oMenu
@inject IJSRuntime JSRuntime
@using System;

<div class="container">
    <div class="col-sm-4" style="text-align:center">
        <img src="Imagenes/ubook.png" style="width:150px" />

        <h3>Lista de Tarjetas</h3>

        <div class="list-group" style="text-align:left">
            @foreach (var tar in ListaDeTarjetas)
            {
                <button type="button" class="list-group-item list-group-item-action" @onclick="@((args) => Vertar(tar.id_tarjeta))">@tar.numero</button>
            }
            <button class="claseb btn btn-primary" @onclick="Agregar">Agregar Nueva</button>
        </div>
    </div>
    <div class="col-sm-8">

        <h2>Info. Tienda</h2>
        <div class="col-lg-5">
            <div class="row">
                <div class="col-md-12">
                    <div class="mb-3" style="text-align:left">
                        <label for="nombre" class="form-label">Nombre de la Tienda</label>
                        <input type="text" class="form-control" aria-describedby="emailHelp" style="background: #ececec;">
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="mb-3" style="text-align:left">
                        <label for="nombre" class="form-label">Dirección</label>
                        <InputTextArea class="form-control form-control-sm" style="background: #ececec;" @bind-Value="temp"></InputTextArea>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3" style="text-align:left">
                        <label for="horaInicio" class="form-label">Hora de apertura:</label>
                        <input type="time" id="horaInicio" name="horaInicio" class="form-control" aria-describedby="emailHelp" style="background: #ececec;" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-6" style="text-align:left">
                        <label for="horaFin" class="form-label">Hora de cierre:</label>
                        <input type="time" id="horaFin" name="horaFin" class="form-control" aria-describedby="emailHelp" style="background: #ececec;" />
                    </div>
                </div>
            </div>
            <div class="row">
                @if (nuevaTienda.id_tarjeta == 0)
                {
                    <button class="claseb btn btn-primary col" @onclick="Guardar">Guardar</button>
                }
            </div>
        </div>
    </div>

</div>
<style>

    .claseb {
        margin: 5px;
    }
</style>

@code {
    string temp;

    protected override async Task OnInitializedAsync()
    {
        var temp = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "admin");
        if (temp != null)
        {

        }
        else
        {
            oMenu.NavigateTo("/notaccess");
        }
    }

    public async Task Vertar(int id)
    {
        mes = string.Empty;
        anio = string.Empty;
        nuevaTienda = new Tarjeta();
        foreach (var tar in ListaDeTarjetas)
        {
            if (tar.id_tarjeta == id)
            {
                nuevaTienda = tar;
                string[] partes = nuevaTienda.fecha_vencimiento.Split('/');
                mes = partes[0];
                anio = partes[1];
            }
        }
    }

    public async Task Agregar()
    {
        mes = string.Empty;
        anio = string.Empty;
        nuevaTienda = new Tarjeta();
    }

    public Respuesta<Tarjeta> oRespuesta = new Respuesta<Tarjeta>();
    public async Task Guardar()
    {
        nuevaTienda.titular = EspaciosHelper.EliminarEspaciosRepetidos(nuevaTienda.titular);
        nuevaTienda.numero = EspaciosHelper.EliminarTodosLosEspacios(nuevaTienda.numero);
        mes = EspaciosHelper.EliminarTodosLosEspacios(mes);
        anio = EspaciosHelper.EliminarTodosLosEspacios(anio);
        nuevaTienda.id_usuario = usuario.ID;
        if (EspaciosHelper.ValidarCadena(nuevaTienda.titular) && EspaciosHelper.ValidarCadena(nuevaTienda.numero) && EspaciosHelper.ValidarCadena(mes) && EspaciosHelper.ValidarCadena(anio))
        {
            nuevaTienda.fecha_vencimiento = mes + "/" + anio;
            var response = await HttpClient.PostAsJsonAsync<Tarjeta>(Url, nuevaTienda);
            oRespuesta = response.Content.ReadFromJsonAsync<Respuesta<Tarjeta>>().Result;
            if (oRespuesta.status == "success")
            {
                var oRespuestaC = await HttpClient.GetFromJsonAsync<Respuesta<List<Tarjeta>>>(Url + "?user_id=" + usuario.ID);
                ListaDeTarjetas = oRespuestaC.data;
            }
        }
        else
        {
            ShowMessage(ToastType.Danger, "Asegure haber ingresado toda la información.");
        }

    }
}
 *@