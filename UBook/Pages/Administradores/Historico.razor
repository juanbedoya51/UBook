@page "/historico"
@using System;
@using System.Net.Http
@using System.Net.Http.Json
@using UBook.Data
@using System.Globalization;
@using Newtonsoft.Json;
@inject NavigationManager oMenu
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components.QuickGrid

@if (carga)
{
    <div class="d-flex justify-content-center" style="margin-top:200px">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <PageTitle>Historico</PageTitle>
    <Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomRight" />
    <h3 style="text-align:center">HISTORICO DE VENTAS</h3>
    <div class="row mb-3">
        <div class="col-sm">
            <div class="search-box">
                <input type="search" autofocus @bind="vcNombre" @bind:event="oninput" placeholder="Buscar..." />
            </div>
        </div>
        @if (rol == "admin")
        {
            <div class="col-sm-2">
                <a class="btn btn-sm btn-outline-success btn-sm" href="/reglibro"><i class="bi bi-plus-circle"></i>Nuevo</a>
            </div>
        }
    </div>
    <div class="row">

        @foreach (var lib in filtroLibros)
        {
            <div class="col-lg-6">
                <div class="row" style="background-color: #EAEAEA; margin: 5px; max-width: 680px; border: 20px; padding: 10px; align-items: center; align-content: center; text-align: center;}">
                    <!-- Columna 1 con imagen -->
                    <div class="col">
                        <img src="@($"data:image/jpeg;base64,{lib.imagen}")" alt="Producto" class="img-fluid" style="width:125px" />
                    </div>

                    <!-- Columna 2 con dos filas (título y precio) -->
                    <div class="col">
                        <div class="row">
                            <div class="col">
                                <h3>@lib.nombre</h3>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>
                                    @lib.precio.ToString("C0",CultureInfo.CreateSpecificCulture("en-US"))
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Columna 3 con dos filas (botón comprar y botón reservar) -->
                    <div class="col">
                        <div class="row mb-3 btn">
                            <i class="bi bi-cart-check-fill" style="font-size:40px; color:green"></i>
                            <h5>Vendido</h5>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

}
@code {
    public IQueryable<Libro> maestroLibros { get; set; } = null;
    private string Url = "libros.php";
    private bool carga { get; set; } = true;
    PaginationState paginacion = new PaginationState { ItemsPerPage = 10 };
    QuickGrid<Libro> refGrid;
    string vcNombre = string.Empty;
    DateTime min = new DateTime(2000, 1, 1);
    DateTime minMedals = new DateTime(2000, 1, 1);
    DateTime maxMedals = DateTime.Now;
    string rol = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var temp = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "admin");
        if (temp != null)
        {
            rol = "admin";
            var oRespuesta = await HttpClient.GetFromJsonAsync<Respuesta<List<Libro>>>(Url);
            maestroLibros = oRespuesta.data.AsQueryable();

            carga = false;
        }
        else
        {
            oMenu.NavigateTo("/notaccess");
        }
        
    }

    IQueryable<Libro> filtroLibros
    {
        get
        {
            var result = maestroLibros?.Where(c => c.fecha <= maxMedals);

            if (!string.IsNullOrEmpty(vcNombre))
            {
                result = result.Where(c =>
                    (c.nombre != null && c.nombre.ToLower().Contains(vcNombre.ToLower()))
                    ||
                    (c.autor != null && c.autor.ToLower().Contains(vcNombre.ToLower()))
                    ||
                    (c.editorial != null && c.editorial.ToLower().Contains(vcNombre.ToLower()))
                    ||
                    (c.genero != null && c.genero.ToLower().Contains(vcNombre.ToLower()))
                    ||
                    (c.idioma != null && c.idioma.ToLower().Contains(vcNombre.ToLower()))
                    );
            }


            if (minMedals > min)
            {
                result = result.Where(c => c.fecha >= minMedals);
            }

            return result;
        }
    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string obser) => messages.Add(CreateToastMessage(toastType, obser));

    private ToastMessage CreateToastMessage(ToastType toastType, string obser)
    => new ToastMessage
        {
            Type = toastType,
            Title = "UBook Notificación",
            HelpText = $"{DateTime.Now}",
            Message = obser,
        };
}
