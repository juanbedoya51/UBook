@page "/crearadmin"
@page "/crearadmin/{Id:int}"
@inject HttpClient HttpClient
@using System;
@using System.Net.Http
@using System.Net.Http.Json
@inject NavigationManager oMenu
@using UBook.Data
@inject IJSRuntime JSRuntime

@if (carga)
{
    <div class="d-flex justify-content-center" style="margin-top:200px">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <PageTitle>Crear Admin</PageTitle>
    <Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomRight" />

    <div class="row" style="color: #8F8E8E;font-family: 'Poppins';">
        <div class="col-md-6" style="text-align:center">
            <img src="Imagenes/ubook.png" style="width:400px" />
        </div>
        <div class="col-md-4" style="text-align:center">
            <h3>Crear Administrador</h3>

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3" style="text-align:left">
                        <label for="exampleInputTD" class="form-label">Tipo de documento</label>
                        <select class="form-select" aria-label="Default select example" style="background: #ececec;" @bind="nuevoAdmin.tipo_documento">
                            <option selected></option>
                            <option value="CC">CC</option>
                            <option value="CE">CE</option>
                            <option value="TI">TI</option>
                        </select>
                    </div>
                    <div class="mb-3" style="text-align:left">
                        <label for="documento" class="form-label">Documento</label>
                        <input type="text" class="form-control" id="documento" aria-describedby="emailHelp" style="background: #ececec;" @bind-value="nuevoAdmin.documento">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3" style="text-align:left">
                        <label for="nombre" class="form-label">Nombre</label>
                        <input type="email" class="form-control" id="nombre" aria-describedby="emailHelp" style="background: #ececec;" @bind-value="nuevoAdmin.nombre">
                    </div>
                    <div class="mb-3" style="text-align:left">
                        <label for="Email" class="form-label">Correo electrónico</label>
                        <input type="email" class="form-control" id="Email" aria-describedby="emailHelp" style="background: #ececec;" @bind-value="nuevoAdmin.correo">
                    </div>
                    @if (Id == 0)
                    {
                        <div class="mb-3" style="text-align:left">
                            <label for="contrasena1" class="form-label">Clave</label>
                            <input type="password" class="form-control" id="contrasena1" style="background: #ececec;" @bind-value="nuevoAdmin.contrasena">
                        </div>
                        <div class="mb-3" style="text-align:left">
                            <label for="contrasena2" class="form-label">Repetir clave</label>
                            <input type="password" class="form-control" id="contrasena2" style="background: #ececec;" @bind-value="Contrasena2">
                        </div>
                        <Button class="btn btn-primary" style="background-image: linear-gradient(90deg, #8C52FF 0%, #5CE1E6 100%); width:70%" @onclick="@CrearAdministrador">Registrar</Button>
                    }
                    else
                    {
                        <Button class="btn btn-primary" style="background-color: #f17502; width:70%" @onclick="@ModificarAdmin">MODIFICAR</Button>
                    }
                </div>
            </div>

        </div>
    </div>
}
@code {
    [Parameter]
    public int Id { get; set; }

    private Admin nuevoAdmin = new Admin();
    private string mensaje = "";
    private string Url = "/Ubook/admin.php";
    private string Contrasena2 { get; set; }
    private bool carga { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        carga = true;
        var temp = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "root");
        if (temp != null)
        {
            nuevoAdmin = new Admin();
            if (Id != 0)
            {
                var oRespuesta = await HttpClient.GetFromJsonAsync<Respuesta<Admin>>(Url + "?id=" + Id);
                if (oRespuesta.status == "success")
                {
                    nuevoAdmin = oRespuesta.data;
                }
            }
            carga = false;
        }
        else
        {
            oMenu.NavigateTo("/notaccess");
        }
    }

    private async Task CrearAdministrador()
    {
        if (nuevoAdmin.contrasena == Contrasena2)
        {
            var response = await HttpClient.PostAsJsonAsync<Admin>(Url, nuevoAdmin);
            var oRespuesta = response.Content.ReadFromJsonAsync<Respuesta<Admin>>().Result;
            if (oRespuesta.status == "success")
            {
                nuevoAdmin = oRespuesta.data;
                oMenu.NavigateTo("/crearadmin/" + nuevoAdmin.ID);
            }
            else
            {
                ShowMessage(ToastType.Danger, oRespuesta.message);
            }
        }
    }

    private async Task ModificarAdmin()
    {
        var response = await HttpClient.PutAsJsonAsync<Admin>(Url, nuevoAdmin);
        var oRespuesta = response.Content.ReadFromJsonAsync<Respuesta<Admin>>().Result;
        if (oRespuesta.status == "success")
        {
            ShowMessage(ToastType.Success, oRespuesta.message);
            await OnInitializedAsync();
        }
        else
        {
            ShowMessage(ToastType.Danger, oRespuesta.message);
        }
    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string obser) => messages.Add(CreateToastMessage(toastType, obser));

    private ToastMessage CreateToastMessage(ToastType toastType, string obser)
    => new ToastMessage
        {
            Type = toastType,
            Title = "UBook Notificación",
            HelpText = $"{DateTime.Now}",
            Message = obser,
        };
}
